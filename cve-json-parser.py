import json
import glob
import collections
import re
import pickle
from json import dumps, loads, JSONEncoder, JSONDecoder
package_db = collections.defaultdict(list)
cve_id_db = {}

package_name = None
'''
class SetEncoder(json.JSONEncoder):
    def default(self, obj):
       if isinstance(obj, set):
          return list(obj)
       return json.JSONEncoder.default(self, obj)
'''

class PythonObjectEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (list, dict, str, unicode, int, float, bool, type(None))):
            return JSONEncoder.default(self, obj)
        return {'_python_object': pickle.dumps(obj)}

def as_python_object(dct):
    if '_python_object' in dct:
        return pickle.loads(str(dct['_python_object']))
    return dct


def get_packages_rpm(package_list):
    """
    Get the packages from an rpm string
    :param package_strs:
    :return:
    """
    package_strs = package_list.split("\n")
    packages = collections.defaultdict(set)
    errors = []
    for x in package_strs:
        m = re.search(r'(.*)\|(.*)\|(.*)', x)
        if m:
            (vendor, name, version) = m.groups()
            #path = path or ''
            verrel = version
            packages[name].add(version)

            #print ('118',format([vendor, name, version ]))
        else:
            errors.append('ERROR: Invalid name: %s\n' % x)
    return errors, packages


#file_directory = "nvdcve-1.0-2019.json"
for filename in glob.glob('./dbs/*.json'):
    with open(filename) as file:
        parsed_json = json.load(file)
        for cve in parsed_json["CVE_Items"]:
           reject = False
           for des in cve["cve"]["description"]["description_data"]:
                if "** REJECT **" in des["value"]:
                    reject = True
                    print ("cve-id %s is Rejected"% (cve["cve"]["CVE_data_meta"]["ID"]))
                    break
           if reject:
               print ("cve-id %s is Rejected"% (cve["cve"]["CVE_data_meta"]["ID"]))
               continue
          # """cve """
           temp = {}
           temp["configurations"] = cve["configurations"]
           temp["impact"] = cve ["impact"]
           temp["publishedDate"] = cve ["publishedDate"]
           temp["lastModifiedDate"] = cve["lastModifiedDate"]
           temp["problemtype"] = cve["cve"]["problemtype"]
           temp["description"] = cve["cve"]["description"]
           temp["references"] = cve["cve"]["references"]

           cve_id_db[cve["cve"]["CVE_data_meta"]["ID"]] = temp

           for affects in cve["cve"]["affects"]["vendor"]["vendor_data"]:
                for product_data in affects["product"]["product_data"]:
                        if product_data["product_name"] in package_db:
                            found = False
                            list_ = package_db[product_data["product_name"]]
                            for temp_dict in list_ :
                                if cve["cve"]["CVE_data_meta"]["ID"] == temp_dict["cve_id"]:
                                    temp_info = temp_dict["version_set"]
                                    for  v in product_data["version"]["version_data"]:
                                        temp_info.add(v["version_value"])
                                    temp_dict["version_set"] = temp_info
                                    found=True
                            if not found:
                                 info = {}
                                 version_set = set()
                                 for v in product_data["version"]["version_data"]:
                                     version_set.add(v["version_value"])
                                 info["version_set"] = version_set
                                 info["cve_id"] = cve["cve"]["CVE_data_meta"]["ID"]

                                 package_db[product_data["product_name"]].append(info)
                        else:
                            info = {}
                            version_set = set()
                            for v in product_data["version"]["version_data"]:
                                version_set.add(v["version_value"])

                            info["version_set"] = version_set
                            info["cve_id"] = cve["cve"]["CVE_data_meta"]["ID"]
                            package_db[product_data["product_name"]].append(info)


with open('nvdcve-package.json', 'w') as f:
    json.dump(package_db, f,cls=PythonObjectEncoder)

with open('nvdcve-cve-db.json', 'w') as f:
    json.dump(cve_id_db, f, cls=PythonObjectEncoder)

'''
with open("sbom", 'r') as f:
    errors, packages = get_packages_rpm(f.read())

#print packages
with open("nvdcve-package.json") as file:
    pkg_db = json.load(file,object_hook=as_python_object)

for p,vp in packages.items():
    if p in pkg_db:
        #temp = package_db[p]
        temp = pkg_db[p]
        #print temp
        for t in temp:
            intersection = vp & t["version_set"]
            for ver in intersection:
                print("package %s, version %s, cve %s"%(p,ver,t["cve_id"]))


#for key, value in package_db.items():
#        for ver in value:
          #if key == "systemd":
            #print ("Package %s Ver %s Version Affected %s "%(key,ver["version_value"], ver["version_affected"]))
#        print ("===============")

            #for product in vendor_data['product']:

 #print("CVE : %s Product-Name: %s  Product-Version: %s Version-Affects: %s "% (h["cve"]["CVE_data_meta"]["ID"],i["cve"]["affects"]["vendor"]["vendor_data"]["product"]["product_data"]["product_name"] ,i["cve"]["affects"]["vendor"]["vendor_data"]["product"]["product_data"] ["version"]["version_data"]["version_value"], i["cve"]["affects"]["vendor"]["vendor_data"][0]["product"]["product_data"]["version"]["version_data"]["version_affected"]))
'''
